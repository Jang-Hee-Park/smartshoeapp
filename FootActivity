package com.example.myapplication

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import com.example.myapplication.ui.theme.MyApplicationTheme

// ‚úÖ ÏÑºÏÑú ÏúÑÏπò ÌëúÌòÑÏö© ÌÅ¥ÎûòÏä§
data class OffsetDP(val x: Dp, val y: Dp)

class FootActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MyApplicationTheme {
                Box(modifier = Modifier.fillMaxSize()) {
                    // üîô ÏÉÅÎã® ÏôºÏ™Ω Îí§Î°ú Í∞ÄÍ∏∞ Î≤ÑÌäº
                    IconButton(
                        onClick = { finish() },
                        modifier = Modifier
                            .padding(start = 16.dp, top = 48.dp)
                            .align(Alignment.TopStart)
                    ) {
                        Icon(
                            imageVector = Icons.Filled.ArrowBack,
                            contentDescription = "Îí§Î°ú Í∞ÄÍ∏∞"
                        )
                    }

                    // ü¶∂ ÏÑºÏÑú UI Ìè¨Ìï®Ìïú Î∞ú ÌôîÎ©¥
                    FootPressureScreen()
                }
            }
        }
    }
}

@Composable
fun FootPressureScreen() {
    // üìå ÏÑºÏÑú ÏúÑÏπò Í≥†Ï†ï
    val sensorPositions = listOf(
        OffsetDP(0.dp, 95.dp),       // ‚ë† Îí§ÍøàÏπò
        OffsetDP(-10.dp, 45.dp),     // ‚ë° Ï§ëÏ°±Î∂Ä ÏïÑÎûò
        OffsetDP(-5.dp, -15.dp),     // ‚ë¢ Ï§ëÏ°±Î∂Ä ÏúÑ
        OffsetDP(-40.dp, -65.dp),    // ‚ë£ Ï†ÑÏ°±Î∂Ä ÏôºÏ™Ω
        OffsetDP(45.dp, -45.dp)      // ‚ë§ Ï†ÑÏ°±Î∂Ä Ïò§Î•∏Ï™Ω
    )

    // üß† ÏïïÎ†• Í∞í ÏÉÅÌÉú Î¶¨Ïä§Ìä∏ (BLE ÏàòÏã† Ïãú Ïù¥ Í∞í Í∞±Ïã†)
    val sensorValues = remember { mutableStateListOf(0f, 0f, 0f, 0f, 0f) }

    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        // Î∞ú Ïù¥ÎØ∏ÏßÄ
        Image(
            painter = painterResource(id = R.drawable.foot),
            contentDescription = "Foot Image",
            contentScale = ContentScale.Fit,
            modifier = Modifier.size(450.dp)
        )

        // ÏÑºÏÑú Ïõê Í∑∏Î¶¨Í∏∞ (ÏúÑÏπò+Í∞í)
        sensorPositions.forEachIndexed { index, position ->
            val pressure = sensorValues.getOrElse(index) { 0f }
            PressureSensorCircle(
                xOffset = position.x,
                yOffset = position.y,
                pressure = pressure
            )
        }
    }
}

@Composable
fun PressureSensorCircle(xOffset: Dp, yOffset: Dp, pressure: Float) {
    // ÏïïÎ†•Í∞íÏóê Îî∞Îùº ÏÉâÏÉÅ Í≤∞Ï†ï
    val color = when {
        pressure == 0f -> Color.LightGray.copy(alpha = 0.3f) // ÏÑºÏÑú ÏàòÏã† Ï†Ñ
        pressure >= 20f -> Color.Red
        pressure >= 10f -> Color(0xFFFF9800) // Ï£ºÌô©
        else -> Color(0xFF4CAF50) // Ï¥àÎ°ù
    }

    Box(
        modifier = Modifier
            .offset(x = xOffset, y = yOffset)
            .size(40.dp)
            .background(color = color, shape = CircleShape)
    )
}
